package it.govpay.pagamento.v3.api.impl;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriBuilder;

import org.openspcoop2.utils.service.BaseImpl;
import org.openspcoop2.utils.service.context.IContext;
import org.openspcoop2.utils.transport.http.HttpRequestMethod;

import eu.medsea.mimeutil.MimeUtil;
import it.govpay.core.dao.anagrafica.DominiDAO;
import it.govpay.core.dao.anagrafica.dto.BasicFindRequestDTO;
import it.govpay.core.dao.anagrafica.dto.FindDominiDTO;
import it.govpay.core.dao.anagrafica.dto.FindDominiDTOResponse;
import it.govpay.core.dao.anagrafica.dto.GetDominioDTO;
import it.govpay.core.utils.GovpayConfig;
import it.govpay.exception.WebApplicationExceptionMapper;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.pagamento.v3.api.DominiApi;
import it.govpay.pagamento.v3.beans.Domini;
import it.govpay.pagamento.v3.beans.converter.DominiConverter;
import it.govpay.rs.v3.acl.Acl;
import it.govpay.rs.v3.acl.AuthorizationRules;
import it.govpay.rs.v3.acl.impl.TipoUtenzaOnlyAcl;
/**
 * GovPay - API Pagamento
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class DominiApiServiceImpl extends BaseImpl implements DominiApi {
	
	public static UriBuilder basePath = UriBuilder.fromPath("/domini");

	public DominiApiServiceImpl(){
		super(org.slf4j.LoggerFactory.getLogger(DominiApiServiceImpl.class));
	}
	
	private AuthorizationRules getAuthorizationRules() throws Exception{
		AuthorizationRules ac = new AuthorizationRules();
		
		/*
		 * Utenti anonimi possono chiamare:
		 * - domini - lista domini
		 * - domini/{idDominio}/logo - per scaricare il logo del dominio
		 */
		{
			TIPO_UTENZA[] tipiUtenza = { TIPO_UTENZA.ANONIMO };
			
			Map<HttpRequestMethod, String[]> resources = new HashMap<HttpRequestMethod, String[]>();
			{
				String[] location = { "/domini" };
				resources.put(HttpRequestMethod.GET, location);
			}
			{
				String[] location = { "/domini/{idDominio}/logo" };
				resources.put(HttpRequestMethod.GET, location);
			}
			
			Acl acl = new TipoUtenzaOnlyAcl(tipiUtenza, resources);
			ac.addAcl(acl);
		}
		/*
		 * Utenti CITTADINO e APPLICAZIONE possono chiamare tutte le operazioni:
		 */
		{
			TIPO_UTENZA[] tipiUtenza = { TIPO_UTENZA.CITTADINO, TIPO_UTENZA.APPLICAZIONE };
			Acl acl = new TipoUtenzaOnlyAcl(tipiUtenza);
			ac.addAcl(acl);
		}
		
		return ac;
	}

	/**
	 * Lettura del logo di un dominio
	 *
	 */
	@Override
	public String getLogo(String idDominio) {
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo"); 

			// Parametri - > DTO Input
			GetDominioDTO getDominioDTO = new GetDominioDTO(context.getAuthentication(), idDominio);

			// INIT DAO
			DominiDAO dominiDAO = new DominiDAO();
			
			// CHIAMATA AL DAO
			byte[] logo = dominiDAO.getLogo(getDominioDTO);
			
			MimeUtil.registerMimeDetector(eu.medsea.mimeutil.detector.MagicMimeMimeDetector.class.getName());
			
			Collection<?> mimeTypes = MimeUtil.getMimeTypes(logo);
			
			String mimeType = MimeUtil.getFirstMimeType(mimeTypes.toString()).toString();

			ResponseBuilder entity = Response.status(Status.OK).entity(logo);
			entity.header("CacheControl", "max-age: "+ GovpayConfig.getInstance().getCacheLogo().intValue());
			entity.header("Content-Type", mimeType);

			context.getLogger().info("Invocazione completata con successo");
			return new String(logo);
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}

	/**
	 * Elenco dei domini
	 *
	 */
	@Override
	public Domini findDomini(Integer offset, Integer limit, String fields, String sort) {
		
		/* default values */
		if(offset == null || offset < 0) offset = 0;
		if(limit == null || limit < 0 || limit > 100) limit = BasicFindRequestDTO.DEFAULT_LIMIT;
		
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");  

			FindDominiDTO listaDominiDTO = new FindDominiDTO(context.getAuthentication());
			listaDominiDTO.setOffset(offset);
			listaDominiDTO.setLimit(limit);
			listaDominiDTO.setOrderBy(sort);
			listaDominiDTO.setAbilitato(true);

			// INIT DAO
			DominiDAO dominiDAO = new DominiDAO();

			// CHIAMATA AL DAO
			FindDominiDTOResponse listaDominiDTOResponse = dominiDAO.findDomini(listaDominiDTO);

			// CONVERT TO JSON DELLA RISPOSTA

			Domini domini = DominiConverter.toRsModel(listaDominiDTOResponse.getResults(), offset, limit, listaDominiDTOResponse.getTotalResults(), context.getUriInfo());

			context.getLogger().info("Invocazione completata con successo");

			return domini;

		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}
}

