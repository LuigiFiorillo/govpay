package it.govpay.pagamento.v2.api.impl;

import it.govpay.core.dao.pagamenti.RptDAO;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTOResponse;
import it.govpay.model.Rpt.StatoRpt;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.pagamento.v2.acl.Acl;
import it.govpay.pagamento.v2.acl.AuthorizationRules;
import it.govpay.pagamento.v2.acl.impl.TipoUtenzaOnlyAcl;
import it.govpay.pagamento.v2.api.*;
import it.govpay.pagamento.v2.beans.EsitoRpp;
import it.govpay.pagamento.v2.beans.Rpp;
import it.govpay.pagamento.v2.beans.Rpps;

import org.openspcoop2.utils.jaxrs.impl.AuthorizationManager;
import org.openspcoop2.utils.jaxrs.impl.BaseImpl;
import org.openspcoop2.utils.jaxrs.impl.ServiceContext;
import org.openspcoop2.utils.jaxrs.impl.AuthorizationConfig;

import javax.ws.rs.core.UriBuilder;

import org.openspcoop2.utils.jaxrs.fault.FaultCode;
/**
 * GovPay - API Pagamento
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class TransazioniApiServiceImpl extends BaseImpl implements TransazioniApi {

	public static UriBuilder basePath = UriBuilder.fromPath("/rpps");
	
	public TransazioniApiServiceImpl(){
		super(org.slf4j.LoggerFactory.getLogger(TransazioniApiServiceImpl.class));
	}

	private AuthorizationRules getAuthorizationRules() throws Exception{
		AuthorizationRules ac = new AuthorizationRules();
		
		/*
		 * Utenti anonimi possono chiamare: nessun servizio
		 */
		
		/*
		 * Utenti CITTADINO e APPLICAZIONE possono chiamare tutte le operazioni:
		 */
		{
			TIPO_UTENZA[] tipiUtenza = { TIPO_UTENZA.CITTADINO, TIPO_UTENZA.APPLICAZIONE };
			Acl acl = new TipoUtenzaOnlyAcl(tipiUtenza);
			ac.addAcl(acl);
		}
		
		return ac;
	}

    /**
     * Lista delle richieste di pagamento pendenza
     *
     */
	@Override
	public Rpps findRpps(Integer offset, Integer limit, String fields, String sort, String idDominio, String iuv, String ccp, String idA2A, String idPendenza, String idDebitore, EsitoRpp statoPendenza, String idSessionePortale) {
		ServiceContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");    
                        
			// Parametri - > DTO Input

			ListaRptDTO listaRptDTO = new ListaRptDTO(context.getAuthentication());
			listaRptDTO.setOffset(offset);
			listaRptDTO.setLimit(limit);

			if(statoPendenza != null)
				listaRptDTO.setStato(StatoRpt.valueOf(statoPendenza.name()));

			listaRptDTO.setIdDominio(idDominio);
			listaRptDTO.setIuv(iuv);
			listaRptDTO.setCcp(ccp);
			listaRptDTO.setIdA2A(idA2A);
			listaRptDTO.setIdPendenza(idPendenza);
			listaRptDTO.setIdPagamento(idSessionePortale);

				listaRptDTO.setOrderBy(sort);
			// INIT DAO

			RptDAO rptDAO = new RptDAO();

			// CHIAMATA AL DAO

			ListaRptDTOResponse listaRptDTOResponse = rptDAO.listaRpt(listaRptDTO);
        
			Rpps rpps = null;
			context.getLogger().info("Invocazione completata con successo");
			
			return rpps;
     
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
    }
    
    /**
     * Dettaglio di una richiesta di pagamento pendenza
     *
     */
	@Override
    public Rpp getRpp(String idDominio, String iuv, String ccp) {
		ServiceContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     
                        
        // TODO: Implement...
        
			context.getLogger().info("Invocazione completata con successo");
        return null;
     
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
    }
    
    /**
     * Acquisizione della richiesta di pagamento pagopa
     *
     */
	@Override
    public Object getRpt(String idDominio, String iuv, String ccp) {
		ServiceContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     
                        
        // TODO: Implement...
        
			context.getLogger().info("Invocazione completata con successo");
        return null;
     
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
    }
    
    /**
     * Acquisizione della ricevuta di pagamento
     *
     */
	@Override
    public byte[] getRt(String idDominio, String iuv, String ccp) {
		ServiceContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     
                        
        // TODO: Implement...
        
			context.getLogger().info("Invocazione completata con successo");
        return null;
     
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
    }
    
}

