package it.govpay.pagamento.v2.api.impl;

import java.net.URLDecoder;
import java.util.List;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;

import org.apache.commons.lang.StringUtils;
import org.openspcoop2.generic_project.exception.NotAuthorizedException;
import org.openspcoop2.utils.service.BaseImpl;
import org.openspcoop2.utils.service.context.IContext;

import it.gov.digitpa.schemas._2011.pagamenti.CtRichiestaPagamentoTelematico;
import it.govpay.core.autorizzazione.AuthorizationManager;
import it.govpay.core.dao.anagrafica.dto.BasicFindRequestDTO;
import it.govpay.core.dao.pagamenti.RptDAO;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTO.FormatoRicevuta;
import it.govpay.core.dao.pagamenti.dto.LeggiRicevutaDTOResponse;
import it.govpay.core.dao.pagamenti.dto.LeggiRptDTO;
import it.govpay.core.dao.pagamenti.dto.LeggiRptDTOResponse;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTO;
import it.govpay.core.dao.pagamenti.dto.ListaRptDTOResponse;
import it.govpay.core.utils.JaxbUtils;
import it.govpay.exception.WebApplicationExceptionMapper;
import it.govpay.model.Rpt.StatoRpt;
import it.govpay.model.Utenza.TIPO_UTENZA;
import it.govpay.rs.v2.acl.impl.TipoUtenzaOnlyAcl;
import it.govpay.rs.v2.acl.Acl;
import it.govpay.rs.v2.acl.AuthorizationRules;
import it.govpay.pagamento.v2.api.TransazioniApi;
import it.govpay.pagamento.v2.beans.EsitoRpp;
import it.govpay.pagamento.v2.beans.Rpp;
import it.govpay.pagamento.v2.beans.Rpps;
import it.govpay.pagamento.v2.beans.converter.RppConverter;
/**
 * GovPay - API Pagamento
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class TransazioniApiServiceImpl extends BaseImpl implements TransazioniApi {

	public static UriBuilder basePath = UriBuilder.fromPath("/rpps");

	public TransazioniApiServiceImpl(){
		super(org.slf4j.LoggerFactory.getLogger(TransazioniApiServiceImpl.class));
	}

	private AuthorizationRules getAuthorizationRules() throws Exception{
		AuthorizationRules ac = new AuthorizationRules();

		/*
		 * Utenti anonimi possono chiamare: nessun servizio
		 */

		/*
		 * Utenti CITTADINO e APPLICAZIONE possono chiamare tutte le operazioni:
		 */
		{
			TIPO_UTENZA[] tipiUtenza = { TIPO_UTENZA.CITTADINO, TIPO_UTENZA.APPLICAZIONE };
			Acl acl = new TipoUtenzaOnlyAcl(tipiUtenza);
			ac.addAcl(acl);
		}

		return ac;
	}

	/**
	 * Lista delle richieste di pagamento pendenza
	 *
	 */
	@Override
	public Rpps findRpps(Integer offset, Integer limit, String fields, String sort, String idDominio, String iuv, String ccp, String idA2A, String idPendenza, String idDebitore, EsitoRpp statoPendenza, String idSessionePortale) {
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");    

			/* default values */
			if(offset == null || offset < 0) offset = 0;
			if(limit == null || limit < 0 || limit > 100) limit = BasicFindRequestDTO.DEFAULT_LIMIT;
			// Parametri - > DTO Input

			ListaRptDTO listaRptDTO = new ListaRptDTO(context.getAuthentication());
			listaRptDTO.setOffset(offset);
			listaRptDTO.setLimit(limit);

			if(statoPendenza != null)
				listaRptDTO.setStato(StatoRpt.valueOf(statoPendenza.name()));

			listaRptDTO.setIdDominio(idDominio);
			listaRptDTO.setIuv(iuv);
			listaRptDTO.setCcp(ccp);
			listaRptDTO.setIdA2A(idA2A);
			listaRptDTO.setIdPendenza(idPendenza);
			listaRptDTO.setIdPagamento(idSessionePortale); 

			listaRptDTO.setOrderBy(sort);
			
			// Autorizzazione sui domini
			List<String> domini = AuthorizationManager.getDominiAutorizzati(context.getAuthentication());
			if(domini == null) {
				throw AuthorizationManager.toNotAuthorizedExceptionNessunDominioAutorizzato(context.getAuthentication());
			}
			listaRptDTO.setCodDomini(domini);

			RptDAO rptDAO = new RptDAO();

			// CHIAMATA AL DAO

			ListaRptDTOResponse listaRptDTOResponse = rptDAO.listaRpt(listaRptDTO);
			Rpps rpps = RppConverter.toRsModel(listaRptDTOResponse.getResults(),offset,limit,listaRptDTOResponse.getTotalResults(),context.getUriInfo());
			context.getLogger().info("Invocazione completata con successo");
			return rpps;

		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}

	/**
	 * Dettaglio di una richiesta di pagamento pendenza
	 *
	 */
	@Override
	public Rpp getRpp(String idDominio, String iuv, String ccp) {
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     

			LeggiRptDTO leggiRptDTO = new LeggiRptDTO(context.getAuthentication());
			leggiRptDTO.setIdDominio(idDominio);
			leggiRptDTO.setIuv(iuv);
			ccp = ccp.contains("%") ? URLDecoder.decode(ccp,"UTF-8") : ccp;
			leggiRptDTO.setCcp(ccp);

			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(leggiRptDTO.getUser(), idDominio)) {
				throw AuthorizationManager.toNotAuthorizedException(leggiRptDTO.getUser(),idDominio, null);
			}
			
			RptDAO ricevuteDAO = new RptDAO(); 

			LeggiRptDTOResponse leggiRptDTOResponse = ricevuteDAO.leggiRpt(leggiRptDTO);
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(context.getAuthentication(), leggiRptDTOResponse.getDominio().getCodDominio())) {
				throw AuthorizationManager.toNotAuthorizedException(context.getAuthentication(), leggiRptDTOResponse.getDominio().getCodDominio(), null);
			}

			Rpp rpp = RppConverter.toRsModel(leggiRptDTOResponse.getRpt(), leggiRptDTOResponse.getVersamento(), leggiRptDTOResponse.getApplicazione());

			context.getLogger().info("Invocazione completata con successo");
			return rpp;

		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}

	/**
	 * Acquisizione della richiesta di pagamento pagopa
	 *
	 */
	@Override
	public Object getRpt(String idDominio, String iuv, String ccp) {
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     

			LeggiRptDTO leggiRptDTO = new LeggiRptDTO(context.getAuthentication());
			leggiRptDTO.setIdDominio(idDominio);
			leggiRptDTO.setIuv(iuv);
			ccp = ccp.contains("%") ? URLDecoder.decode(ccp,"UTF-8") : ccp;
			leggiRptDTO.setCcp(ccp);
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(leggiRptDTO.getUser(), idDominio)) {
				throw AuthorizationManager.toNotAuthorizedException(leggiRptDTO.getUser(),idDominio, null);
			}

			RptDAO ricevuteDAO = new RptDAO(); 

			LeggiRptDTOResponse leggiRptDTOResponse = ricevuteDAO.leggiRpt(leggiRptDTO);
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(context.getAuthentication(), leggiRptDTOResponse.getDominio().getCodDominio())) {
				throw AuthorizationManager.toNotAuthorizedException(context.getAuthentication(), leggiRptDTOResponse.getDominio().getCodDominio(), null);
			}

			CtRichiestaPagamentoTelematico rpt = JaxbUtils.toRPT(leggiRptDTOResponse.getRpt().getXmlRpt(), false);
			context.getLogger().info("Invocazione completata con successo");
			return rpt;
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}

	/**
	 * Acquisizione della ricevuta di pagamento
	 *
	 */
	@Override
	public byte[] getRt(String idDominio, String iuv, String ccp,Boolean visualizzaSoggettoDebitore) {
		IContext context = this.getContext();
		try {
			context.getLogger().info("Invocazione in corso ...");     
			getAuthorizationRules().authorize(context);
			context.getLogger().debug("Autorizzazione completata con successo");     
			
			String accept = "";
			if(StringUtils.isNotEmpty(this.getContext().getServletRequest().getHeader("Accept"))) {
				accept = this.getContext().getServletRequest().getHeader("Accept");
			}

			LeggiRicevutaDTO leggiPagamentoPortaleDTO = new LeggiRicevutaDTO(context.getAuthentication());
			leggiPagamentoPortaleDTO.setIdDominio(idDominio);
			leggiPagamentoPortaleDTO.setIuv(iuv);
			ccp = ccp.contains("%") ? URLDecoder.decode(ccp,"UTF-8") : ccp;
			leggiPagamentoPortaleDTO.setCcp(ccp);
			
			if(visualizzaSoggettoDebitore != null)
				leggiPagamentoPortaleDTO.setVisualizzaSoggettoDebitore(visualizzaSoggettoDebitore.booleanValue()); 
			
			// controllo che il dominio sia autorizzato
			if(!AuthorizationManager.isDominioAuthorized(leggiPagamentoPortaleDTO.getUser(), idDominio)) {
				throw AuthorizationManager.toNotAuthorizedException(leggiPagamentoPortaleDTO.getUser(),idDominio, null);
			}

			RptDAO ricevuteDAO = new RptDAO(); 
 
			LeggiRicevutaDTOResponse ricevutaDTOResponse = null; 

			byte[] byteRes = null;
			if(accept.toLowerCase().contains("application/pdf")) {
				leggiPagamentoPortaleDTO.setFormato(FormatoRicevuta.PDF);
				ricevutaDTOResponse = ricevuteDAO.leggiRt(leggiPagamentoPortaleDTO);
				
				// controllo che il dominio sia autorizzato
				if(!AuthorizationManager.isDominioAuthorized(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio())) {
					throw AuthorizationManager.toNotAuthorizedException(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio(), null);
				}
				
				String rtPdfEntryName = idDominio +"_"+ iuv + "_"+ ccp + ".pdf";
				context.getServletResponse().setHeader("content-disposition", "attachment; filename=\""+rtPdfEntryName+"\"");
				byteRes = ricevutaDTOResponse.getPdf(); 
			} else if(accept.toLowerCase().contains(MediaType.APPLICATION_JSON)) {
				leggiPagamentoPortaleDTO.setFormato(FormatoRicevuta.JSON);
				ricevutaDTOResponse = ricevuteDAO.leggiRt(leggiPagamentoPortaleDTO);
				
				// controllo che il dominio sia autorizzato
				if(!AuthorizationManager.isDominioAuthorized(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio())) {
					throw AuthorizationManager.toNotAuthorizedException(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio(), null);
				}
				
				byteRes = ricevutaDTOResponse.getRpt().getXmlRt();
			} else if(accept.toLowerCase().contains("application/xml")){
				leggiPagamentoPortaleDTO.setFormato(FormatoRicevuta.XML);
				ricevutaDTOResponse = ricevuteDAO.leggiRt(leggiPagamentoPortaleDTO);
				
				// controllo che il dominio sia autorizzato
				if(!AuthorizationManager.isDominioAuthorized(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio())) {
					throw AuthorizationManager.toNotAuthorizedException(context.getAuthentication(), ricevutaDTOResponse.getDominio().getCodDominio(), null);
				}
				
				byteRes = ricevutaDTOResponse.getRpt().getXmlRt();
			} else {
				throw new NotAuthorizedException("Rt non disponibile nel formato richiesto");
			}
			
			context.getLogger().info("Invocazione completata con successo");
			return byteRes;
		}
		catch(javax.ws.rs.WebApplicationException e) {
			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
			throw e;
		}
		catch(Throwable e) {
			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
			throw WebApplicationExceptionMapper.handleException(e);
//			throw FaultCode.ERRORE_INTERNO.toException(e);
		}
	}

}

